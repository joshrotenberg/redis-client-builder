{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Redis Client Builder","text":"<p>A fluent API for building Redis client instances in Kotlin with first-class Java support.</p>"},{"location":"#overview","title":"Overview","text":"<p>Redis Client Builder is a library that simplifies the instantiation of Redis clients by providing a fluent, builder-style API. It supports multiple Redis client libraries:</p> <ul> <li>Jedis</li> <li>Lettuce</li> </ul> <p>The library provides a consistent API across all supported Redis client libraries, making it easy to switch between them without changing your configuration code.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fluent API: Build Redis client instances with a clean, readable syntax</li> <li>Type Safety: Leverage Kotlin's type system for safer code</li> <li>Consistent Interface: Use the same API pattern across different Redis client libraries</li> <li>Java Interoperability: First-class support for Java developers</li> <li>Comprehensive Configuration: Access all configuration options of the underlying client libraries</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#gradle-kotlin-dsl","title":"Gradle (Kotlin DSL)","text":"<pre><code>dependencies {\n    implementation(\"com.joshrotenberg:redis-client-builder:1.0-SNAPSHOT\")\n}\n</code></pre>"},{"location":"#gradle-groovy-dsl","title":"Gradle (Groovy DSL)","text":"<pre><code>dependencies {\n    implementation 'com.joshrotenberg:redis-client-builder:1.0-SNAPSHOT'\n}\n</code></pre>"},{"location":"#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.joshrotenberg&lt;/groupId&gt;\n    &lt;artifactId&gt;redis-client-builder&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#jedis","title":"Jedis","text":"<pre><code>// Kotlin\nval jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\n</code></pre> <pre><code>// Java\nJedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\n</code></pre>"},{"location":"#unifiedjedis","title":"UnifiedJedis","text":"<pre><code>// Kotlin\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\n</code></pre> <pre><code>// Java\nUnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\n</code></pre>"},{"location":"#lettuce","title":"Lettuce","text":"<pre><code>// Kotlin\nval redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\n</code></pre> <pre><code>// Java\nRedisClient redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For more detailed information, check out the Getting Started guide or the client-specific documentation:</p> <ul> <li>Jedis</li> <li>UnifiedJedis</li> <li>Lettuce</li> </ul>"},{"location":"comparison/","title":"Comparing Redis Client Builder vs Direct Instantiation","text":"<p>This document compares the usage of Redis Client Builder with direct instantiation of Redis clients, focusing on Jedis as an example.</p>"},{"location":"comparison/#complex-jedis-instantiation-example","title":"Complex Jedis Instantiation Example","text":""},{"location":"comparison/#direct-jedis-instantiation","title":"Direct Jedis Instantiation","text":"<p>When using Jedis directly, you need to manually configure the JedisPool and its underlying JedisPoolConfig. This requires multiple steps and detailed knowledge of the Jedis API:</p> <pre><code>// Java\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.Jedis;\nimport java.time.Duration;\n\n// Create and configure JedisPoolConfig\nJedisPoolConfig poolConfig = new JedisPoolConfig();\npoolConfig.setMaxTotal(100);\npoolConfig.setMaxIdle(20);\npoolConfig.setMinIdle(10);\npoolConfig.setTestOnBorrow(true);\npoolConfig.setTestOnReturn(true);\npoolConfig.setTestWhileIdle(true);\npoolConfig.setTimeBetweenEvictionRuns(Duration.ofMillis(30000));\npoolConfig.setBlockWhenExhausted(true);\npoolConfig.setJmxEnabled(true);\n\n// Create JedisPool with the configured poolConfig\nJedisPool jedisPool = new JedisPool(\n    poolConfig,\n    \"redis-server.example.com\",\n    6379,\n    2000, // connection timeout\n    2000, // socket timeout\n    \"password123\",\n    0,    // database\n    null, // client name\n    true, // SSL\n    null, // SSL socket factory\n    null, // SSL parameters\n    null  // hostname verifier\n);\n\n// Use the JedisPool\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value);\n}\n</code></pre> <pre><code>// Kotlin\nimport redis.clients.jedis.JedisPool\nimport redis.clients.jedis.JedisPoolConfig\nimport java.time.Duration\n\n// Create and configure JedisPoolConfig\nval poolConfig = JedisPoolConfig().apply {\n    maxTotal = 100\n    maxIdle = 20\n    minIdle = 10\n    testOnBorrow = true\n    testOnReturn = true\n    testWhileIdle = true\n    timeBetweenEvictionRuns = Duration.ofMillis(30000)\n    blockWhenExhausted = true\n    jmxEnabled = true\n}\n\n// Create JedisPool with the configured poolConfig\nval jedisPool = JedisPool(\n    poolConfig,\n    \"redis-server.example.com\",\n    6379,\n    2000, // connection timeout\n    2000, // socket timeout\n    \"password123\",\n    0,    // database\n    null, // client name\n    true, // SSL\n    null, // SSL socket factory\n    null, // SSL parameters\n    null  // hostname verifier\n)\n\n// Use the JedisPool\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value)\n}\n</code></pre>"},{"location":"comparison/#using-redis-client-builder","title":"Using Redis Client Builder","text":"<p>With Redis Client Builder, the same configuration can be achieved with a more concise, readable, and fluent API:</p> <pre><code>// Java\nimport com.joshrotenberg.redis.client.builder.RedisClientBuilderFactory;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.Jedis;\n\n// Create JedisPool with the same configuration using the builder\nJedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"redis-server.example.com\")\n    .port(6379)\n    .password(\"password123\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .ssl(true)\n    .maxTotal(100)\n    .maxIdle(20)\n    .minIdle(10)\n    .testOnBorrow(true)\n    .testOnReturn(true)\n    .testWhileIdle(true)\n    .timeBetweenEvictionRuns(30000)\n    .blockWhenExhausted(true)\n    .jmxEnabled(true)\n    .build();\n\n// Use the JedisPool\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value);\n}\n</code></pre> <pre><code>// Kotlin\nimport com.joshrotenberg.redis.client.builder.RedisClientBuilderFactory\nimport redis.clients.jedis.JedisPool\n\n// Create JedisPool with the same configuration using the builder\nval jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"redis-server.example.com\")\n    .port(6379)\n    .password(\"password123\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .ssl(true)\n    .maxTotal(100)\n    .maxIdle(20)\n    .minIdle(10)\n    .testOnBorrow(true)\n    .testOnReturn(true)\n    .testWhileIdle(true)\n    .timeBetweenEvictionRuns(30000)\n    .blockWhenExhausted(true)\n    .jmxEnabled(true)\n    .build()\n\n// Use the JedisPool\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value)\n}\n</code></pre>"},{"location":"comparison/#benefits-of-using-redis-client-builder","title":"Benefits of Using Redis Client Builder","text":"<ol> <li> <p>Simplified API: The builder pattern provides a more intuitive and readable way to configure Redis clients.</p> </li> <li> <p>Reduced Boilerplate: No need to create and configure separate objects like JedisPoolConfig.</p> </li> <li> <p>Type Safety: The builder methods provide type safety and IDE auto-completion.</p> </li> <li> <p>Consistent API: The same builder pattern is used across different Redis client libraries (Jedis, Lettuce), making it easier to switch between them.</p> </li> <li> <p>Default Values: Sensible defaults are provided for all configuration options, so you only need to specify the values you want to change.</p> </li> <li> <p>Encapsulation: The builder encapsulates the complexity of creating and configuring Redis clients, making your code more maintainable.</p> </li> <li> <p>Fluent Interface: The fluent interface allows for method chaining, making the code more concise and readable.</p> </li> </ol>"},{"location":"comparison/#when-to-use-redis-client-builder","title":"When to Use Redis Client Builder","text":"<p>Redis Client Builder is particularly useful in the following scenarios:</p> <ol> <li> <p>Complex Configurations: When you need to configure many options for your Redis client.</p> </li> <li> <p>Multiple Redis Clients: When you need to create multiple Redis clients with similar configurations.</p> </li> <li> <p>Switching Between Client Libraries: When you want to easily switch between different Redis client libraries.</p> </li> <li> <p>Readability and Maintainability: When you want to make your code more readable and maintainable.</p> </li> <li> <p>Standardization: When you want to standardize how Redis clients are created across your codebase or organization.</p> </li> </ol>"},{"location":"comparison/#conclusion","title":"Conclusion","text":"<p>Redis Client Builder provides a more elegant and maintainable way to create and configure Redis clients compared to direct instantiation. It simplifies the API, reduces boilerplate code, and provides a consistent interface across different Redis client libraries.</p>"},{"location":"getting-started/","title":"Getting Started with Redis Client Builder","text":"<p>This guide will help you get started with Redis Client Builder, a fluent API for building Redis client instances in Kotlin with first-class Java support.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 17 or higher</li> <li>Kotlin 1.8 or higher (for Kotlin projects)</li> <li>A Redis server (for running examples)</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#gradle-kotlin-dsl","title":"Gradle (Kotlin DSL)","text":"<pre><code>dependencies {\n    implementation(\"com.joshrotenberg:redis-client-builder:1.0-SNAPSHOT\")\n}\n</code></pre>"},{"location":"getting-started/#gradle-groovy-dsl","title":"Gradle (Groovy DSL)","text":"<pre><code>dependencies {\n    implementation 'com.joshrotenberg:redis-client-builder:1.0-SNAPSHOT'\n}\n</code></pre>"},{"location":"getting-started/#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.joshrotenberg&lt;/groupId&gt;\n    &lt;artifactId&gt;redis-client-builder&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>Redis Client Builder provides a consistent API for creating instances of different Redis client libraries. The main entry point is the <code>RedisClientBuilderFactory</code> class, which provides methods for creating builders for each supported client library.</p>"},{"location":"getting-started/#creating-a-jedis-client","title":"Creating a Jedis Client","text":"<pre><code>// Kotlin\nval jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\n\n// Use the JedisPool\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value)\n}\n</code></pre> <pre><code>// Java\nJedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\n\n// Use the JedisPool\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value);\n}\n</code></pre>"},{"location":"getting-started/#creating-a-unifiedjedis-client","title":"Creating a UnifiedJedis Client","text":"<pre><code>// Kotlin\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\n\n// Use the UnifiedJedis instance\nunifiedJedis.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value)\n}\n</code></pre> <pre><code>// Java\nUnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\n\n// Use the UnifiedJedis instance\ntry {\n    unifiedJedis.set(\"key\", \"value\");\n    String value = unifiedJedis.get(\"key\");\n    System.out.println(value);\n} finally {\n    unifiedJedis.close();\n}\n</code></pre>"},{"location":"getting-started/#creating-a-lettuce-client","title":"Creating a Lettuce Client","text":"<pre><code>// Kotlin\nval redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\n\n// Use the RedisClient\nval connection = redisClient.connect()\nval commands = connection.sync()\ncommands.set(\"key\", \"value\")\nval value = commands.get(\"key\")\nprintln(value)\nconnection.close()\nredisClient.shutdown()\n</code></pre> <pre><code>// Java\nRedisClient redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\n\n// Use the RedisClient\nStatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();\nRedisCommands&lt;String, String&gt; commands = connection.sync();\ncommands.set(\"key\", \"value\");\nString value = commands.get(\"key\");\nSystem.out.println(value);\nconnection.close();\nredisClient.shutdown();\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>For more detailed information about each client library, check out the client-specific documentation:</p> <ul> <li>Jedis</li> <li>UnifiedJedis</li> <li>Lettuce</li> </ul> <p>For a complete reference of all available methods and options, see the API Reference.</p>"},{"location":"clients/cluster/","title":"Redis Cluster Support","text":"<p>Redis Client Builder provides support for Redis Cluster configuration, allowing you to build Redis clients that connect to Redis Cluster for high availability and sharding.</p>"},{"location":"clients/cluster/#what-is-redis-cluster","title":"What is Redis Cluster?","text":"<p>Redis Cluster is a distributed implementation of Redis that provides:</p> <ul> <li>Data sharding across multiple Redis nodes</li> <li>High availability through automatic failover</li> <li>No single point of failure</li> </ul>"},{"location":"clients/cluster/#jedis-cluster","title":"Jedis Cluster","text":"<p>Redis Client Builder supports building Jedis clients with Cluster configuration:</p>"},{"location":"clients/cluster/#kotlin-example","title":"Kotlin Example","text":"<pre><code>val jedisCluster = RedisClientBuilderFactory.jedisCluster()\n    .addNode(\"localhost\", 7000)\n    .addNode(\"localhost\", 7001)\n    .addNode(\"localhost\", 7002)\n    .password(\"password\")\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .maxRedirections(5)\n    .ssl(true)\n    .maxTotal(100)\n    .maxIdle(10)\n    .build()\n\n// Use the JedisCluster\njedisCluster.set(\"key\", \"value\")\nval value = jedisCluster.get(\"key\")\nprintln(value)\njedisCluster.close()\n</code></pre>"},{"location":"clients/cluster/#java-example","title":"Java Example","text":"<pre><code>JedisCluster jedisCluster = RedisClientBuilderFactory.jedisCluster()\n    .addNode(\"localhost\", 7000)\n    .addNode(\"localhost\", 7001)\n    .addNode(\"localhost\", 7002)\n    .password(\"password\")\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .maxRedirections(5)\n    .ssl(true)\n    .maxTotal(100)\n    .maxIdle(10)\n    .build();\n\n// Use the JedisCluster\njedisCluster.set(\"key\", \"value\");\nString value = jedisCluster.get(\"key\");\nSystem.out.println(value);\njedisCluster.close();\n</code></pre>"},{"location":"clients/cluster/#lettuce-cluster","title":"Lettuce Cluster","text":"<p>Redis Client Builder also supports building Lettuce clients with Cluster configuration:</p>"},{"location":"clients/cluster/#kotlin-example_1","title":"Kotlin Example","text":"<pre><code>val redisClusterClient = RedisClientBuilderFactory.lettuceCluster()\n    .addNode(\"localhost\", 7000)\n    .addNode(\"localhost\", 7001)\n    .addNode(\"localhost\", 7002)\n    .password(\"password\")\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .maxRedirections(5)\n    .ssl(true)\n    .autoReconnect(true)\n    .build()\n\n// Use the RedisClusterClient\nval connection = redisClusterClient.connect()\nval commands = connection.sync()\ncommands.set(\"key\", \"value\")\nval value = commands.get(\"key\")\nprintln(value)\nconnection.close()\nredisClusterClient.shutdown()\n</code></pre>"},{"location":"clients/cluster/#java-example_1","title":"Java Example","text":"<pre><code>RedisClusterClient redisClusterClient = RedisClientBuilderFactory.lettuceCluster()\n    .addNode(\"localhost\", 7000)\n    .addNode(\"localhost\", 7001)\n    .addNode(\"localhost\", 7002)\n    .password(\"password\")\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .maxRedirections(5)\n    .ssl(true)\n    .autoReconnect(true)\n    .build();\n\n// Use the RedisClusterClient\nStatefulRedisClusterConnection&lt;String, String&gt; connection = redisClusterClient.connect();\nRedisAdvancedClusterCommands&lt;String, String&gt; commands = connection.sync();\ncommands.set(\"key\", \"value\");\nString value = commands.get(\"key\");\nSystem.out.println(value);\nconnection.close();\nredisClusterClient.shutdown();\n</code></pre>"},{"location":"clients/cluster/#generic-cluster-builder","title":"Generic Cluster Builder","text":"<p>You can also use the generic cluster builder method to create a builder for a specific Redis cluster client type:</p>"},{"location":"clients/cluster/#kotlin-example_2","title":"Kotlin Example","text":"<pre><code>val jedisClusterBuilder = RedisClientBuilderFactory.clusterBuilder(JedisCluster::class.java) as JedisClusterClientBuilder\nval lettuceClusterBuilder = RedisClientBuilderFactory.clusterBuilder(RedisClusterClient::class.java) as LettuceClusterClientBuilder\n</code></pre>"},{"location":"clients/cluster/#java-example_2","title":"Java Example","text":"<pre><code>JedisClusterClientBuilder jedisClusterBuilder = (JedisClusterClientBuilder) RedisClientBuilderFactory.clusterBuilder(JedisCluster.class);\nLettuceClusterClientBuilder lettuceClusterBuilder = (LettuceClusterClientBuilder) RedisClientBuilderFactory.clusterBuilder(RedisClusterClient.class);\n</code></pre>"},{"location":"clients/cluster/#configuration-options","title":"Configuration Options","text":""},{"location":"clients/cluster/#common-options","title":"Common Options","text":"<p>These options are available for all Redis Cluster client builders:</p> <ul> <li><code>addNode(String, Int)</code>: Adds a Redis cluster node to the configuration</li> <li><code>password(String)</code>: Sets the password for authentication with the Redis cluster</li> <li><code>connectionTimeout(Int)</code>: Sets the connection timeout in milliseconds</li> <li><code>socketTimeout(Int)</code>: Sets the socket timeout in milliseconds</li> <li><code>maxRedirections(Int)</code>: Sets the maximum number of redirections to follow during command execution</li> <li><code>ssl(Boolean)</code>: Enables SSL/TLS for the connection</li> </ul>"},{"location":"clients/cluster/#jedis-cluster-options","title":"Jedis Cluster Options","text":"<p>These options are specific to the Jedis Cluster client builder:</p> <ul> <li><code>maxTotal(Int)</code>: Sets the maximum number of connections that can be allocated by the pool at a given time</li> <li><code>maxIdle(Int)</code>: Sets the maximum number of idle connections that can be maintained by the pool without being closed</li> <li><code>minIdle(Int)</code>: Sets the minimum number of idle connections to maintain in the pool</li> <li><code>testOnBorrow(Boolean)</code>: Sets whether connections should be validated before being borrowed from the pool</li> <li><code>testOnReturn(Boolean)</code>: Sets whether connections should be validated before being returned to the pool</li> <li><code>testWhileIdle(Boolean)</code>: Sets whether idle connections should be validated by the idle connection evictor</li> </ul>"},{"location":"clients/cluster/#lettuce-cluster-options","title":"Lettuce Cluster Options","text":"<p>These options are specific to the Lettuce Cluster client builder:</p> <ul> <li><code>autoReconnect(Boolean)</code>: Sets whether the client should automatically reconnect</li> <li><code>requestQueueSize(Int)</code>: Sets the request queue size</li> <li><code>publishOnScheduler(Boolean)</code>: Sets whether to publish on the scheduler</li> <li><code>disconnectedBehavior(ClientOptions.DisconnectedBehavior)</code>: Sets the disconnected behavior</li> </ul>"},{"location":"clients/jedis-pooled/","title":"JedisPooled Client Builder","text":"<p>The JedisPooledClientBuilder provides a fluent API for creating JedisPooled instances from the Jedis library.</p>"},{"location":"clients/jedis-pooled/#overview","title":"Overview","text":"<p>JedisPooled is a client interface in Jedis that provides access to Redis commands and features with built-in connection pooling. It simplifies the use of Redis by handling connection management internally.</p>"},{"location":"clients/jedis-pooled/#basic-usage","title":"Basic Usage","text":""},{"location":"clients/jedis-pooled/#kotlin","title":"Kotlin","text":"<pre><code>// Create a JedisPooled instance with default settings\nval jedisPooled = RedisClientBuilderFactory.jedisPooled().build()\n\n// Create a JedisPooled instance with custom settings\nval customJedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build()\n</code></pre>"},{"location":"clients/jedis-pooled/#java","title":"Java","text":"<pre><code>// Create a JedisPooled instance with default settings\nJedisPooled jedisPooled = RedisClientBuilderFactory.jedisPooled().build();\n\n// Create a JedisPooled instance with custom settings\nJedisPooled customJedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build();\n</code></pre>"},{"location":"clients/jedis-pooled/#connection-options","title":"Connection Options","text":"<p>The JedisPooledClientBuilder supports two main connection modes:</p> <ol> <li>Direct Connection: Connect directly to a Redis server</li> <li>URI-based Connection: Connect using a Redis URI</li> </ol>"},{"location":"clients/jedis-pooled/#direct-connection","title":"Direct Connection","text":"<pre><code>val jedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .build()\n</code></pre>"},{"location":"clients/jedis-pooled/#uri-based-connection","title":"URI-based Connection","text":"<pre><code>val jedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .uri(\"redis://user:password@localhost:6379/0\")\n    .build()\n</code></pre>"},{"location":"clients/jedis-pooled/#configuration-options","title":"Configuration Options","text":"<p>The JedisPooledClientBuilder supports all the configuration options available in JedisPooled:</p>"},{"location":"clients/jedis-pooled/#basic-connection-settings","title":"Basic Connection Settings","text":"Method Description Default Value <code>host(String)</code> Sets the Redis host \"localhost\" <code>port(Int)</code> Sets the Redis port 6379 <code>password(String)</code> Sets the Redis password null <code>user(String)</code> Sets the Redis user for ACL authentication null <code>database(Int)</code> Sets the Redis database index 0"},{"location":"clients/jedis-pooled/#timeout-settings","title":"Timeout Settings","text":"Method Description Default Value <code>connectionTimeout(Int)</code> Sets the connection timeout in milliseconds 2000 <code>socketTimeout(Int)</code> Sets the socket timeout in milliseconds 2000"},{"location":"clients/jedis-pooled/#ssl-settings","title":"SSL Settings","text":"Method Description Default Value <code>ssl(Boolean)</code> Enables SSL/TLS for the connection false <code>sslSocketFactory(SSLSocketFactory)</code> Sets the SSL socket factory null <code>sslParameters(SSLParameters)</code> Sets the SSL parameters null <code>hostnameVerifier(HostnameVerifier)</code> Sets the hostname verifier null"},{"location":"clients/jedis-pooled/#other-settings","title":"Other Settings","text":"Method Description Default Value <code>clientName(String)</code> Sets the client name null <code>uri(URI)</code> Sets the Redis URI null <code>uri(String)</code> Sets the Redis URI as a string null"},{"location":"clients/jedis-pooled/#instantiation-options","title":"Instantiation Options","text":"<p>JedisPooled can be instantiated in different ways, all of which are supported by the JedisPooledClientBuilder:</p>"},{"location":"clients/jedis-pooled/#direct-connection_1","title":"Direct Connection","text":"<pre><code>// Create a JedisPooled instance with a direct connection\nval jedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .host(\"localhost\")\n    .port(6379)\n    .build()\n</code></pre>"},{"location":"clients/jedis-pooled/#uri-based-connection_1","title":"URI-based Connection","text":"<pre><code>// Create a JedisPooled instance with a URI\nval jedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .uri(\"redis://localhost:6379/0\")\n    .build()\n</code></pre>"},{"location":"clients/jedis-pooled/#usage-examples","title":"Usage Examples","text":""},{"location":"clients/jedis-pooled/#basic-operations","title":"Basic Operations","text":"<pre><code>// Create a JedisPooled instance\nval jedisPooled = RedisClientBuilderFactory.jedisPooled()\n    .host(\"localhost\")\n    .port(6379)\n    .build()\n\n// Use the JedisPooled instance\njedisPooled.use { jedis -&gt;\n    // Set a key\n    jedis.set(\"key\", \"value\")\n\n    // Get a key\n    val value = jedis.get(\"key\")\n\n    // Delete a key\n    jedis.del(\"key\")\n\n    // Check if a key exists\n    val exists = jedis.exists(\"key\")\n\n    // Increment a counter\n    val newValue = jedis.incr(\"counter\")\n\n    // Set a key with expiration\n    jedis.setex(\"expiring-key\", 60, \"value\")\n\n    // Get the TTL of a key\n    val ttl = jedis.ttl(\"expiring-key\")\n}\n</code></pre>"},{"location":"clients/jedis-pooled/#java-example","title":"Java Example","text":"<pre><code>import com.joshrotenberg.redis.client.builder.RedisClientBuilderFactory;\nimport redis.clients.jedis.JedisPooled;\n\npublic class JedisPooledExample {\n    public static void main(String[] args) {\n        // Create a JedisPooled instance\n        JedisPooled jedisPooled = RedisClientBuilderFactory.jedisPooled()\n            .host(\"localhost\")\n            .port(6379)\n            .build();\n\n        try {\n            // Set a key\n            jedisPooled.set(\"key\", \"value\");\n\n            // Get a key\n            String value = jedisPooled.get(\"key\");\n\n            // Delete a key\n            jedisPooled.del(\"key\");\n\n            // Check if a key exists\n            boolean exists = jedisPooled.exists(\"key\");\n\n            // Increment a counter\n            long newValue = jedisPooled.incr(\"counter\");\n\n            // Set a key with expiration\n            jedisPooled.setex(\"expiring-key\", 60, \"value\");\n\n            // Get the TTL of a key\n            long ttl = jedisPooled.ttl(\"expiring-key\");\n        } finally {\n            // Close the connection when done\n            jedisPooled.close();\n        }\n    }\n}\n</code></pre>"},{"location":"clients/jedis-pooled/#comparison-with-other-jedis-clients","title":"Comparison with Other Jedis Clients","text":""},{"location":"clients/jedis-pooled/#jedispooled-vs-jedispool","title":"JedisPooled vs JedisPool","text":"<p>JedisPooled provides a simplified API compared to JedisPool. With JedisPool, you need to explicitly get and return Jedis instances from the pool:</p> <pre><code>// Using JedisPool\nval jedisPool = RedisClientBuilderFactory.jedis().build()\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n}\n\n// Using JedisPooled\nval jedisPooled = RedisClientBuilderFactory.jedisPooled().build()\njedisPooled.set(\"key\", \"value\")\n</code></pre>"},{"location":"clients/jedis-pooled/#jedispooled-vs-unifiedjedis","title":"JedisPooled vs UnifiedJedis","text":"<p>JedisPooled and UnifiedJedis provide similar APIs, but JedisPooled includes built-in connection pooling, while UnifiedJedis does not:</p> <pre><code>// Using UnifiedJedis\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis().build()\nunifiedJedis.set(\"key\", \"value\")\n\n// Using JedisPooled\nval jedisPooled = RedisClientBuilderFactory.jedisPooled().build()\njedisPooled.set(\"key\", \"value\")\n</code></pre>"},{"location":"clients/jedis-pooled/#when-to-use-jedispooled","title":"When to Use JedisPooled","text":"<p>JedisPooled is a good choice when:</p> <ol> <li>You want a simple API for Redis operations</li> <li>You need connection pooling for better performance</li> <li>You don't need to manage connections manually</li> </ol> <p>If you need more control over connection management, consider using JedisPool instead.</p>"},{"location":"clients/jedis/","title":"Jedis Client Builder","text":"<p>The JedisClientBuilder provides a fluent API for creating JedisPool instances from the Jedis library.</p>"},{"location":"clients/jedis/#overview","title":"Overview","text":"<p>JedisPool is a connection pool for Jedis clients that manages a pool of connections to Redis servers. It provides thread-safe access to Redis commands and features.</p>"},{"location":"clients/jedis/#basic-usage","title":"Basic Usage","text":""},{"location":"clients/jedis/#kotlin","title":"Kotlin","text":"<pre><code>// Create a JedisPool instance with default settings\nval jedisPool = RedisClientBuilderFactory.jedis().build()\n\n// Create a JedisPool instance with custom settings\nval customJedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build()\n</code></pre>"},{"location":"clients/jedis/#java","title":"Java","text":"<pre><code>// Create a JedisPool instance with default settings\nJedisPool jedisPool = RedisClientBuilderFactory.jedis().build();\n\n// Create a JedisPool instance with custom settings\nJedisPool customJedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build();\n</code></pre>"},{"location":"clients/jedis/#connection-options","title":"Connection Options","text":"<p>The JedisClientBuilder supports two main connection modes:</p> <ol> <li>Direct Connection: Connect directly to a Redis server</li> <li>Pool Configuration: Configure the connection pool settings</li> </ol>"},{"location":"clients/jedis/#direct-connection","title":"Direct Connection","text":"<pre><code>val jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .build()\n</code></pre> <pre><code>JedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .build();\n</code></pre>"},{"location":"clients/jedis/#pool-configuration","title":"Pool Configuration","text":"<pre><code>val jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .maxTotal(100)\n    .maxIdle(10)\n    .minIdle(5)\n    .testOnBorrow(true)\n    .testOnReturn(true)\n    .testWhileIdle(true)\n    .timeBetweenEvictionRuns(30000)\n    .blockWhenExhausted(true)\n    .jmxEnabled(true)\n    .build()\n</code></pre> <pre><code>JedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .maxTotal(100)\n    .maxIdle(10)\n    .minIdle(5)\n    .testOnBorrow(true)\n    .testOnReturn(true)\n    .testWhileIdle(true)\n    .timeBetweenEvictionRuns(30000)\n    .blockWhenExhausted(true)\n    .jmxEnabled(true)\n    .build();\n</code></pre>"},{"location":"clients/jedis/#configuration-options","title":"Configuration Options","text":"<p>The JedisClientBuilder supports all the configuration options available in JedisPool:</p>"},{"location":"clients/jedis/#basic-connection-settings","title":"Basic Connection Settings","text":"Method Description Default Value <code>host(String)</code> Sets the Redis host \"localhost\" <code>port(Int)</code> Sets the Redis port 6379 <code>password(String)</code> Sets the Redis password null <code>database(Int)</code> Sets the Redis database index 0"},{"location":"clients/jedis/#timeout-settings","title":"Timeout Settings","text":"Method Description Default Value <code>connectionTimeout(Int)</code> Sets the connection timeout in milliseconds 2000 <code>socketTimeout(Int)</code> Sets the socket timeout in milliseconds 2000"},{"location":"clients/jedis/#ssl-settings","title":"SSL Settings","text":"Method Description Default Value <code>ssl(Boolean)</code> Enables SSL/TLS for the connection false"},{"location":"clients/jedis/#pool-settings","title":"Pool Settings","text":"Method Description Default Value <code>maxTotal(Int)</code> Sets the maximum number of connections that can be allocated by the pool at a given time 8 <code>maxIdle(Int)</code> Sets the maximum number of idle connections that can be maintained by the pool without being closed 8 <code>minIdle(Int)</code> Sets the minimum number of idle connections to maintain in the pool 0 <code>testOnBorrow(Boolean)</code> Sets whether connections should be validated before being borrowed from the pool false <code>testOnReturn(Boolean)</code> Sets whether connections should be validated before being returned to the pool false <code>testWhileIdle(Boolean)</code> Sets whether idle connections should be validated by the idle connection evictor false <code>timeBetweenEvictionRuns(Long)</code> Sets the time between runs of the idle connection evictor thread in milliseconds -1 <code>blockWhenExhausted(Boolean)</code> Sets whether clients should block when the pool is exhausted true <code>jmxEnabled(Boolean)</code> Sets whether JMX should be enabled for the pool true"},{"location":"clients/jedis/#examples","title":"Examples","text":""},{"location":"clients/jedis/#basic-connection","title":"Basic Connection","text":""},{"location":"clients/jedis/#kotlin_1","title":"Kotlin","text":"<pre><code>val jedisPool = RedisClientBuilderFactory.jedis().build()\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value) // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#java_1","title":"Java","text":"<pre><code>JedisPool jedisPool = RedisClientBuilderFactory.jedis().build();\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value); // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#connection-with-authentication","title":"Connection with Authentication","text":""},{"location":"clients/jedis/#kotlin_2","title":"Kotlin","text":"<pre><code>val jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value) // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#java_2","title":"Java","text":"<pre><code>JedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value); // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#connection-with-ssl","title":"Connection with SSL","text":""},{"location":"clients/jedis/#kotlin_3","title":"Kotlin","text":"<pre><code>val jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .ssl(true)\n    .build()\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value) // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#java_3","title":"Java","text":"<pre><code>JedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .ssl(true)\n    .build();\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value); // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#connection-with-custom-pool-configuration","title":"Connection with Custom Pool Configuration","text":""},{"location":"clients/jedis/#kotlin_4","title":"Kotlin","text":"<pre><code>val jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .maxTotal(50)\n    .maxIdle(10)\n    .minIdle(5)\n    .testOnBorrow(true)\n    .build()\njedisPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value) // Outputs: value\n}\n</code></pre>"},{"location":"clients/jedis/#java_4","title":"Java","text":"<pre><code>JedisPool jedisPool = RedisClientBuilderFactory.jedis()\n    .host(\"localhost\")\n    .port(6379)\n    .maxTotal(50)\n    .maxIdle(10)\n    .minIdle(5)\n    .testOnBorrow(true)\n    .build();\ntry (Jedis jedis = jedisPool.getResource()) {\n    jedis.set(\"key\", \"value\");\n    String value = jedis.get(\"key\");\n    System.out.println(value); // Outputs: value\n}\n</code></pre>"},{"location":"clients/lettuce/","title":"Lettuce Client Builder","text":"<p>The LettuceClientBuilder provides a fluent API for creating RedisClient instances from the Lettuce library.</p>"},{"location":"clients/lettuce/#overview","title":"Overview","text":"<p>Lettuce is a scalable Redis client for Java and Kotlin. It provides synchronous, asynchronous, and reactive APIs for interacting with Redis servers. The LettuceClientBuilder simplifies the creation and configuration of Lettuce's RedisClient instances.</p>"},{"location":"clients/lettuce/#basic-usage","title":"Basic Usage","text":""},{"location":"clients/lettuce/#kotlin","title":"Kotlin","text":"<pre><code>// Create a RedisClient instance with default settings\nval redisClient = RedisClientBuilderFactory.lettuce().build()\n\n// Create a RedisClient instance with custom settings\nval customRedisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build()\n</code></pre>"},{"location":"clients/lettuce/#java","title":"Java","text":"<pre><code>// Create a RedisClient instance with default settings\nRedisClient redisClient = RedisClientBuilderFactory.lettuce().build();\n\n// Create a RedisClient instance with custom settings\nRedisClient customRedisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build();\n</code></pre>"},{"location":"clients/lettuce/#connection-options","title":"Connection Options","text":"<p>The LettuceClientBuilder supports various connection options:</p>"},{"location":"clients/lettuce/#basic-connection","title":"Basic Connection","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .ssl(true)\n    .build()\n</code></pre> <pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .ssl(true)\n    .build();\n</code></pre>"},{"location":"clients/lettuce/#advanced-options","title":"Advanced Options","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .autoReconnect(true)\n    .requestQueueSize(1000)\n    .publishOnScheduler(true)\n    .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n    .build()\n</code></pre> <pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .autoReconnect(true)\n    .requestQueueSize(1000)\n    .publishOnScheduler(true)\n    .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n    .build();\n</code></pre>"},{"location":"clients/lettuce/#configuration-options","title":"Configuration Options","text":"<p>The LettuceClientBuilder supports all the configuration options available in Lettuce's RedisClient:</p>"},{"location":"clients/lettuce/#basic-connection-settings","title":"Basic Connection Settings","text":"Method Description Default Value <code>host(String)</code> Sets the Redis host \"localhost\" <code>port(Int)</code> Sets the Redis port 6379 <code>password(String)</code> Sets the Redis password null <code>database(Int)</code> Sets the Redis database index 0"},{"location":"clients/lettuce/#timeout-settings","title":"Timeout Settings","text":"Method Description Default Value <code>connectionTimeout(Int)</code> Sets the connection timeout in milliseconds 60000 <code>socketTimeout(Int)</code> Sets the socket timeout in milliseconds 60000"},{"location":"clients/lettuce/#ssl-settings","title":"SSL Settings","text":"Method Description Default Value <code>ssl(Boolean)</code> Enables SSL/TLS for the connection false"},{"location":"clients/lettuce/#lettuce-specific-settings","title":"Lettuce-specific Settings","text":"Method Description Default Value <code>autoReconnect(Boolean)</code> Sets whether the client should automatically reconnect true <code>requestQueueSize(Int)</code> Sets the request queue size Integer.MAX_VALUE <code>publishOnScheduler(Boolean)</code> Sets whether to publish on the scheduler false <code>disconnectedBehavior(ClientOptions.DisconnectedBehavior)</code> Sets the disconnected behavior DEFAULT"},{"location":"clients/lettuce/#examples","title":"Examples","text":""},{"location":"clients/lettuce/#basic-connection_1","title":"Basic Connection","text":""},{"location":"clients/lettuce/#kotlin_1","title":"Kotlin","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce().build()\nval connection = redisClient.connect()\nval commands = connection.sync()\ncommands.set(\"key\", \"value\")\nval value = commands.get(\"key\")\nprintln(value) // Outputs: value\nconnection.close()\nredisClient.shutdown()\n</code></pre>"},{"location":"clients/lettuce/#java_1","title":"Java","text":"<pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce().build();\nStatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();\nRedisCommands&lt;String, String&gt; commands = connection.sync();\ncommands.set(\"key\", \"value\");\nString value = commands.get(\"key\");\nSystem.out.println(value); // Outputs: value\nconnection.close();\nredisClient.shutdown();\n</code></pre>"},{"location":"clients/lettuce/#connection-with-authentication","title":"Connection with Authentication","text":""},{"location":"clients/lettuce/#kotlin_2","title":"Kotlin","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build()\nval connection = redisClient.connect()\nval commands = connection.sync()\ncommands.set(\"key\", \"value\")\nval value = commands.get(\"key\")\nprintln(value) // Outputs: value\nconnection.close()\nredisClient.shutdown()\n</code></pre>"},{"location":"clients/lettuce/#java_2","title":"Java","text":"<pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .build();\nStatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();\nRedisCommands&lt;String, String&gt; commands = connection.sync();\ncommands.set(\"key\", \"value\");\nString value = commands.get(\"key\");\nSystem.out.println(value); // Outputs: value\nconnection.close();\nredisClient.shutdown();\n</code></pre>"},{"location":"clients/lettuce/#connection-with-ssl","title":"Connection with SSL","text":""},{"location":"clients/lettuce/#kotlin_3","title":"Kotlin","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .ssl(true)\n    .build()\nval connection = redisClient.connect()\nval commands = connection.sync()\ncommands.set(\"key\", \"value\")\nval value = commands.get(\"key\")\nprintln(value) // Outputs: value\nconnection.close()\nredisClient.shutdown()\n</code></pre>"},{"location":"clients/lettuce/#java_3","title":"Java","text":"<pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce()\n    .host(\"localhost\")\n    .port(6379)\n    .ssl(true)\n    .build();\nStatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();\nRedisCommands&lt;String, String&gt; commands = connection.sync();\ncommands.set(\"key\", \"value\");\nString value = commands.get(\"key\");\nSystem.out.println(value); // Outputs: value\nconnection.close();\nredisClient.shutdown();\n</code></pre>"},{"location":"clients/lettuce/#using-asynchronous-api","title":"Using Asynchronous API","text":""},{"location":"clients/lettuce/#kotlin_4","title":"Kotlin","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce().build()\nval connection = redisClient.connect()\nval asyncCommands = connection.async()\nval setFuture = asyncCommands.set(\"key\", \"value\")\nsetFuture.thenAccept { println(\"Set operation completed\") }\nval getFuture = asyncCommands.get(\"key\")\ngetFuture.thenAccept { value -&gt; println(\"Value: $value\") }\n// Wait for operations to complete\nThread.sleep(1000)\nconnection.close()\nredisClient.shutdown()\n</code></pre>"},{"location":"clients/lettuce/#java_4","title":"Java","text":"<pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce().build();\nStatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();\nRedisAsyncCommands&lt;String, String&gt; asyncCommands = connection.async();\nRedisFuture&lt;String&gt; setFuture = asyncCommands.set(\"key\", \"value\");\nsetFuture.thenAccept(result -&gt; System.out.println(\"Set operation completed\"));\nRedisFuture&lt;String&gt; getFuture = asyncCommands.get(\"key\");\ngetFuture.thenAccept(value -&gt; System.out.println(\"Value: \" + value));\n// Wait for operations to complete\nThread.sleep(1000);\nconnection.close();\nredisClient.shutdown();\n</code></pre>"},{"location":"clients/lettuce/#using-reactive-api","title":"Using Reactive API","text":""},{"location":"clients/lettuce/#kotlin_5","title":"Kotlin","text":"<pre><code>val redisClient = RedisClientBuilderFactory.lettuce().build()\nval connection = redisClient.connect()\nval reactiveCommands = connection.reactive()\nreactiveCommands.set(\"key\", \"value\").subscribe { println(\"Set operation completed\") }\nreactiveCommands.get(\"key\").subscribe { value -&gt; println(\"Value: $value\") }\n// Wait for operations to complete\nThread.sleep(1000)\nconnection.close()\nredisClient.shutdown()\n</code></pre>"},{"location":"clients/lettuce/#java_5","title":"Java","text":"<pre><code>RedisClient redisClient = RedisClientBuilderFactory.lettuce().build();\nStatefulRedisConnection&lt;String, String&gt; connection = redisClient.connect();\nRedisReactiveCommands&lt;String, String&gt; reactiveCommands = connection.reactive();\nreactiveCommands.set(\"key\", \"value\").subscribe(result -&gt; System.out.println(\"Set operation completed\"));\nreactiveCommands.get(\"key\").subscribe(value -&gt; System.out.println(\"Value: \" + value));\n// Wait for operations to complete\nThread.sleep(1000);\nconnection.close();\nredisClient.shutdown();\n</code></pre>"},{"location":"clients/sentinel/","title":"Redis Sentinel Support","text":"<p>Redis Client Builder provides support for Redis Sentinel configuration, allowing you to build Redis clients that connect through Redis Sentinel for high availability.</p>"},{"location":"clients/sentinel/#what-is-redis-sentinel","title":"What is Redis Sentinel?","text":"<p>Redis Sentinel provides high availability for Redis. It monitors your Redis instances, notifies you about changes in their state, and automatically performs failover if a master is not working as expected.</p>"},{"location":"clients/sentinel/#jedis-sentinel","title":"Jedis Sentinel","text":"<p>Redis Client Builder supports building Jedis clients with Sentinel configuration:</p>"},{"location":"clients/sentinel/#kotlin-example","title":"Kotlin Example","text":"<pre><code>val jedisSentinelPool = RedisClientBuilderFactory.jedisSentinel()\n    .masterName(\"mymaster\")\n    .addSentinel(\"sentinel1\", 26379)\n    .addSentinel(\"sentinel2\", 26380)\n    .addSentinel(\"sentinel3\", 26381)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .clientName(\"myclient\")\n    .maxTotal(100)\n    .maxIdle(10)\n    .build()\n\n// Use the JedisSentinelPool\njedisSentinelPool.resource.use { jedis -&gt;\n    jedis.set(\"key\", \"value\")\n    val value = jedis.get(\"key\")\n    println(value)\n}\n</code></pre>"},{"location":"clients/sentinel/#generic-sentinel-builder","title":"Generic Sentinel Builder","text":"<p>You can also use the generic sentinel builder method to create a builder for a specific Redis sentinel client type:</p> <pre><code>val jedisSentinelBuilder = RedisClientBuilderFactory.sentinelBuilder(JedisSentinelPool::class.java) as JedisSentinelClientBuilder\n</code></pre>"},{"location":"clients/sentinel/#configuration-options","title":"Configuration Options","text":""},{"location":"clients/sentinel/#common-options","title":"Common Options","text":"<p>These options are available for all Redis Sentinel client builders:</p> <ul> <li><code>masterName(String)</code>: Sets the name of the Redis master that the sentinels are monitoring</li> <li><code>addSentinel(String, Int)</code>: Adds a Redis sentinel node to the configuration</li> <li><code>password(String)</code>: Sets the password for authentication with the Redis sentinel</li> <li><code>database(Int)</code>: Sets the Redis database index</li> <li><code>connectionTimeout(Int)</code>: Sets the connection timeout in milliseconds</li> <li><code>socketTimeout(Int)</code>: Sets the socket timeout in milliseconds</li> <li><code>ssl(Boolean)</code>: Enables SSL/TLS for the connection</li> </ul>"},{"location":"clients/sentinel/#jedis-sentinel-options","title":"Jedis Sentinel Options","text":"<p>These options are specific to the Jedis Sentinel client builder:</p> <ul> <li><code>clientName(String)</code>: Sets the client name</li> <li><code>maxTotal(Int)</code>: Sets the maximum number of connections that can be allocated by the pool at a given time</li> <li><code>maxIdle(Int)</code>: Sets the maximum number of idle connections that can be maintained by the pool without being closed</li> <li><code>minIdle(Int)</code>: Sets the minimum number of idle connections to maintain in the pool</li> <li><code>testOnBorrow(Boolean)</code>: Sets whether connections should be validated before being borrowed from the pool</li> <li><code>testOnReturn(Boolean)</code>: Sets whether connections should be validated before being returned to the pool</li> <li><code>testWhileIdle(Boolean)</code>: Sets whether idle connections should be validated by the idle connection evictor</li> <li><code>timeBetweenEvictionRuns(Long)</code>: Sets the time between runs of the idle connection evictor thread in milliseconds</li> <li><code>blockWhenExhausted(Boolean)</code>: Sets whether clients should block when the pool is exhausted</li> <li><code>jmxEnabled(Boolean)</code>: Sets whether JMX should be enabled for the pool</li> </ul>"},{"location":"clients/unified-jedis/","title":"UnifiedJedis Client Builder","text":"<p>The UnifiedJedisClientBuilder provides a fluent API for creating UnifiedJedis instances from the Jedis library.</p>"},{"location":"clients/unified-jedis/#overview","title":"Overview","text":"<p>UnifiedJedis is a unified client interface in Jedis that provides access to all Redis commands and features. It supports different connection modes and configuration options.</p>"},{"location":"clients/unified-jedis/#basic-usage","title":"Basic Usage","text":""},{"location":"clients/unified-jedis/#kotlin","title":"Kotlin","text":"<pre><code>// Create a UnifiedJedis instance with default settings\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis().build()\n\n// Create a UnifiedJedis instance with custom settings\nval customUnifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build()\n</code></pre>"},{"location":"clients/unified-jedis/#java","title":"Java","text":"<pre><code>// Create a UnifiedJedis instance with default settings\nUnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis().build();\n\n// Create a UnifiedJedis instance with custom settings\nUnifiedJedis customUnifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"redis-server\")\n    .port(6380)\n    .password(\"secret\")\n    .database(1)\n    .ssl(true)\n    .build();\n</code></pre>"},{"location":"clients/unified-jedis/#connection-options","title":"Connection Options","text":"<p>The UnifiedJedisClientBuilder supports two main connection modes:</p> <ol> <li>Direct Connection: Connect directly to a Redis server</li> <li>URI-based Connection: Connect using a Redis URI</li> </ol>"},{"location":"clients/unified-jedis/#direct-connection","title":"Direct Connection","text":"<pre><code>val unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(0)\n    .connectionTimeout(2000)\n    .socketTimeout(2000)\n    .build()\n</code></pre>"},{"location":"clients/unified-jedis/#uri-based-connection","title":"URI-based Connection","text":"<pre><code>val unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"redis://user:password@localhost:6379/0\")\n    .build()\n</code></pre>"},{"location":"clients/unified-jedis/#configuration-options","title":"Configuration Options","text":"<p>The UnifiedJedisClientBuilder supports all the configuration options available in UnifiedJedis:</p>"},{"location":"clients/unified-jedis/#basic-connection-settings","title":"Basic Connection Settings","text":"Method Description Default Value <code>host(String)</code> Sets the Redis host \"localhost\" <code>port(Int)</code> Sets the Redis port 6379 <code>password(String)</code> Sets the Redis password null <code>user(String)</code> Sets the Redis user for ACL authentication null <code>database(Int)</code> Sets the Redis database index 0"},{"location":"clients/unified-jedis/#timeout-settings","title":"Timeout Settings","text":"Method Description Default Value <code>connectionTimeout(Int)</code> Sets the connection timeout in milliseconds 2000 <code>socketTimeout(Int)</code> Sets the socket timeout in milliseconds 2000"},{"location":"clients/unified-jedis/#ssl-settings","title":"SSL Settings","text":"Method Description Default Value <code>ssl(Boolean)</code> Enables SSL/TLS for the connection false <code>sslSocketFactory(SSLSocketFactory)</code> Sets the SSL socket factory null <code>sslParameters(SSLParameters)</code> Sets the SSL parameters null <code>hostnameVerifier(HostnameVerifier)</code> Sets the hostname verifier null"},{"location":"clients/unified-jedis/#other-settings","title":"Other Settings","text":"Method Description Default Value <code>clientName(String)</code> Sets the client name null <code>uri(URI)</code> Sets the Redis URI null <code>uri(String)</code> Sets the Redis URI as a string null"},{"location":"clients/unified-jedis/#instantiation-options","title":"Instantiation Options","text":"<p>UnifiedJedis can be instantiated in different ways, all of which are supported by the UnifiedJedisClientBuilder:</p>"},{"location":"clients/unified-jedis/#1-direct-connection-with-host-and-port","title":"1. Direct Connection with Host and Port","text":"<pre><code>// Using host and port\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .build()\n</code></pre>"},{"location":"clients/unified-jedis/#2-connection-with-client-configuration","title":"2. Connection with Client Configuration","text":"<pre><code>// Using host, port, and client configuration\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .password(\"password\")\n    .database(1)\n    .connectionTimeout(3000)\n    .socketTimeout(3000)\n    .ssl(true)\n    .build()\n</code></pre>"},{"location":"clients/unified-jedis/#3-connection-with-uri","title":"3. Connection with URI","text":"<pre><code>// Using URI\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"redis://user:password@localhost:6379/0\")\n    .build()\n</code></pre> <pre><code>// Using URI\nUnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"redis://user:password@localhost:6379/0\")\n    .build();\n</code></pre> <pre><code>// Using URI with SSL\nval unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"rediss://user:password@localhost:6379/0\")\n    .build()\n</code></pre> <pre><code>// Using URI with SSL\nUnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"rediss://user:password@localhost:6379/0\")\n    .build();\n</code></pre>"},{"location":"clients/unified-jedis/#examples","title":"Examples","text":""},{"location":"clients/unified-jedis/#basic-connection","title":"Basic Connection","text":"<pre><code>val unifiedJedis = RedisClientBuilderFactory.unifiedJedis().build()\nunifiedJedis.set(\"key\", \"value\")\nval value = unifiedJedis.get(\"key\")\nprintln(value) // Outputs: value\nunifiedJedis.close()\n</code></pre> <pre><code>UnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis().build();\nunifiedJedis.set(\"key\", \"value\");\nString value = unifiedJedis.get(\"key\");\nSystem.out.println(value); // Outputs: value\nunifiedJedis.close();\n</code></pre>"},{"location":"clients/unified-jedis/#connection-with-authentication","title":"Connection with Authentication","text":"<pre><code>val unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .user(\"default\")\n    .password(\"password\")\n    .build()\nunifiedJedis.set(\"key\", \"value\")\nval value = unifiedJedis.get(\"key\")\nprintln(value) // Outputs: value\nunifiedJedis.close()\n</code></pre> <pre><code>UnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .user(\"default\")\n    .password(\"password\")\n    .build();\nunifiedJedis.set(\"key\", \"value\");\nString value = unifiedJedis.get(\"key\");\nSystem.out.println(value); // Outputs: value\nunifiedJedis.close();\n</code></pre>"},{"location":"clients/unified-jedis/#connection-with-ssl","title":"Connection with SSL","text":"<pre><code>val unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .ssl(true)\n    .build()\nunifiedJedis.set(\"key\", \"value\")\nval value = unifiedJedis.get(\"key\")\nprintln(value) // Outputs: value\nunifiedJedis.close()\n</code></pre> <pre><code>UnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .host(\"localhost\")\n    .port(6379)\n    .ssl(true)\n    .build();\nunifiedJedis.set(\"key\", \"value\");\nString value = unifiedJedis.get(\"key\");\nSystem.out.println(value); // Outputs: value\nunifiedJedis.close();\n</code></pre>"},{"location":"clients/unified-jedis/#connection-with-uri","title":"Connection with URI","text":"<pre><code>val unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"redis://localhost:6379/0\")\n    .build()\nunifiedJedis.set(\"key\", \"value\")\nval value = unifiedJedis.get(\"key\")\nprintln(value) // Outputs: value\nunifiedJedis.close()\n</code></pre> <pre><code>UnifiedJedis unifiedJedis = RedisClientBuilderFactory.unifiedJedis()\n    .uri(\"redis://localhost:6379/0\")\n    .build();\nunifiedJedis.set(\"key\", \"value\");\nString value = unifiedJedis.get(\"key\");\nSystem.out.println(value); // Outputs: value\nunifiedJedis.close();\n</code></pre>"}]}